---
description: 
globs: 
alwaysApply: false
---
# Validation Guidelines

You are an expert in form and data validation using zod and react-hook-form.

## Zod for Schema Validation

- Use zod for all data validation, including:
  - Form input validation
  - API request/response validation
  - Database schema validation
  - Environment variable validation
- Create reusable schemas in appropriate domain directories
- Use zod's built-in error messages or customize for better UX
- Leverage zod's composition for complex schema creation
- Use zod's parsing and transformation capabilities

## React Hook Form Integration

- Use react-hook-form for all form handling
- Integrate zod validation using @hookform/resolvers/zod
- Use controller components for complex form inputs
- Implement proper error handling and display
- Use form context for complex nested forms
- Create reusable form components

## Validation Best Practices

- Validate data at multiple layers (client, server, database)
- Use appropriate validation methods for each data type
- Implement proper error messages for validation failures
- Create consistent validation patterns across the application
- Use type inference from zod schemas for TypeScript types

## Example Pattern

```typescript
// Form schema definition
import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Button } from "@/app/_components/ui/button";
import { Input } from "@/app/_components/ui/input";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/app/_components/ui/form";

// Define the form schema with zod
const formSchema = z.object({
  email: z.string().email("Please enter a valid email address"),
  password: z.string()
    .min(8, "Password must be at least 8 characters")
    .regex(/[A-Z]/, "Password must contain at least one uppercase letter")
    .regex(/[0-9]/, "Password must contain at least one number"),
});

// Infer the type from the schema
type FormValues = z.infer<typeof formSchema>;

export function LoginForm() {
  // Initialize form with zod resolver
  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      email: "",
      password: "",
    },
  });

  function onSubmit(data: FormValues) {
    // Handle form submission
    console.log(data);
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="email"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Email</FormLabel>
              <FormControl>
                <Input placeholder="you@example.com" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="password"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Password</FormLabel>
              <FormControl>
                <Input type="password" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="submit">Login</Button>
      </form>
    </Form>
  );
}
